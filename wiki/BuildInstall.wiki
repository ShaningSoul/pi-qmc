#summary How to build and install the pi program

= Introduction =


The easiest way to build is to use:
{{{
./configure
make
}}}

For a parallel build
{{{
./configure --enable-mpi MPICXX=mpic++ MPICC=mpicc MPIF77=mpif77
}}}
where you should use the names of your MPI enabled compilers.

You can also build for different numbers of physical dimensions (default is NDIM=3)
{{{
./configure --with-ndim=2
}}}

= Required libraries =
We use the following libraries in the *_pi_* code:
  * [http://xmlsoft.org/ libxml2]
  * [http://www.oonumerics.org/blitz/ blitz++]
  * [http://www.hdfgroup.org/ hdf5]
  * [http://www.fftw.org/ fftw3]
  * BLAS/LAPACK
  * [http://www.gnu.org/software/gsl/ gsl]

= Advanced build using multiple directories=

In research, we often want different versions of the executables, for example, versions with and
without MPI, or versions compiled for two-dimensional systems. To accomplish this, we make 
a <tt>pibuilds</tt> directory beside our svn checkout directory (<tt>pi</tt> or <tt>pi-qmc</tt>).
We then make empty subdirectories for each build, for example <tt>ndim2mpi</tt> for a two
dimensional MPI version. A typical directory structure is:

{{{
codes/
  pi-qmc/
    configure
    src/
    lib/
  pibuilds/
    ndim1/
    ndim2/
    ndim3/
    ndim1mpi/
    ndim2mpi/
    ndim3mpi/
    debug/
}}}

To build, go into the empty build directory,
<code language="sh">
cd ~/codes/pibuilds/ndim2mpi
</code>
Then run the configure script with the desired options
<code language="sh">
../../configure --with-ndim=2 --enable-mpi
</code>
You will probably want more configure options; see the platform specific instructions
below for some examples.

Then, make the code in that directory,
<code language="sh">
make -j2
</code>

For conveniance, you can make a soft link to the executable
<code language="sh">
ln -sf ~/codes/pibuilds/ndim3mpi ~/bin/pi2Dmpi
</code>

= Platform specific instructions =

==Mac OS X==

All the dependencies are available through [http://www.macports.org/ macports]. It is also handy to install
the latest gcc compilers (with gfortran), openmpi, and python utilities for data analysis and plotting.
{{{
$ port installed
  libxml2 @2.7.3_0 (active)
  blitz @0.9_0 (active)
  hdf5-18 @1.8.3_0 (active)
  gsl @1.12_0 (active)

  gcc44 @4.4.0_0 (active)

  python26 @2.6.2_3 (active)
  py26-numpy @1.3.0_0 (active)
  py26-ipython @0.9.1_0+scientific (active)
  py26-scipy @0.7.0_0+gcc44 (active)
  py26-tables @2.1_0 (active)
}}}

The following configure works well on an intel mac:
<code language="sh">
../../pi/configure CXX=g++-mp-4.4 CC=gcc-mp-4.4 \
CXXFLAGS="-O3 -g -Wall -ffast-math -ftree-vectorize \
-march=prescott -fomit-frame-pointer -pipe" \ 
F77=gfortran-mp-4.4
</code>
or, for an MPI enabled build,
<code language="sh">
../../pi/configure --enable-mpi CXX=g++-mp-4.4 CC=gcc-mp-4.4 F77=gfortran-mp-4.4 \
MPICC=openmpicc MPICXX=openmpicxx MPIF77=openmpif77 \
CXXFLAGS="-O3 -g -Wall -ffast-math -ftree-vectorize \
-march=prescott -fomit-frame-pointer -pipe"
</code>

On a G5 mac, try:
<code language="sh">
../../pi/configure --with-ndim=3  F77=gfortran-mp-4.4 CC=gcc-mp-4.4 CXX=g++-mp-4.4\
CXXFLAGS="-g -O3 -ffast-math -ftree-vectorize -maltivec -mpowerpc-gpopt \
-mpowerpc64 falign-functions=32 -falign-labels=32 -falign-loops=32 -falign-jumps=32 -funroll-loops"
</code>
or, for an MPI enabled build,
<code language="sh">
../../pi/configure --with-ndim=3 --enable-mpi \
CXXFLAGS="-g -O3 -ffast-math -ftree-vectorize -maltivec -mpowerpc-gpopt \
-mpowerpc64 falign-functions=32 -falign-labels=32 -falign-loops=32 -falign-jumps=32 -funroll-loops" \
 F77=gfortran-mp-4.4 CC=gcc-mp-4.4 CXX=g++-mp-4.4  MPICC=openmpicc MPICXX=openmpicxx MPIF77=openmpif77
</code>




==Linux==

==HPC Centers==

===ASU Fulton: saguaro===

===LONI-LSU: queenbee ===

===NCSA: abe===

===TACC: Ranger===